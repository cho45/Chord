
thinking:
- Router は肥大化しないか?
-- OAuth, OpenID などはどうするのか?
--- → 外部ライブラリにすべき部分
- logger がいちまち……


今はWAFに関して軽量なものを作りたいわけではない気分。起動コストはガン無視でよくて、純粋にメンテコストを考えたい。

- それなりのおおきいアプリになると、テストを実行する速度が大切になる
- 純粋に「どの URL を叩くと何が実行されるか」と
- 「この URL に何か設定したい場合、どこに何を書けばいいか」がすぐにわかったほうがいい
- 設定より規約は大規模アプリには通用しない
-- みんながその規約に精通していて、常にそれを覚えていないと開発できないから
- フレームワークコードは少ないほうがいい
-- プロジェクトごとにやりたいことが違うのだから、共通部分はそんなに多いわけがない
-- deploy 方法・デバッグ鯖の起動方法・DB設定の仕方が統一されていればいい
- ファイルは少ないほうがいい
-- 不具合のあたりをつけるのが楽になる


Chord App の構成:

* Router
Ridge::Engine のようなもの
Ridge::Engine は HTTP 専用だが、これはそうではない

ルータはあくまでルータなのでアプリケーションロジックは書かない

** Router::HTTP
+ HTTP::Engine → Chord::App への routing
+ View 起動
+ Response

- 必要なデータおセットして app を起動
- app からの例外をキャッチして処理する

** Router::CLI
+ App::Options → Chord::App への routing
+ View 起動
+ 表示

** Router::Test
Chord::App のテスト

* App
アプリケーションロジック。
モデルを操作してなんかする。http に非依存

適度に例外を発生させる。

* View



* VS Ridge

App + Engine 構成の Ridge app:
- Engine の意味
-- routing マネージャ
--- → routing だけ1つのファイルに纏まっていれば Engine をいちいち見なくても App に飛んで開発できる
-- filter
--- → routing 設定に含まれる
-- view への転送


